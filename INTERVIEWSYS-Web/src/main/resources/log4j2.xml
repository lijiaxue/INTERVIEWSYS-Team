<?xml version="1.0" encoding="utf-8" ?>
<!-- status="OFF"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF -->
<!-- status=debug 可以查看log4j的装配过程 -->
<Configuration status="OFF">
    <!-- 定义下面的引用名 -->
    <Properties>
        <!--日志根目录-->
        <property name="LOG_HOME">/logs_log4j2</property>
        <!--服务名-->
        <property name="SERVER_NAME">log4j2</property>
        <!--日志备份归档目录-->
        <property name="BACKUP_HOME">backup</property>
        <!-- 日志切割的最小单位 -->
        <property name="EVERY_FILE_SIZE">5M</property>
        <!-- 日志输出级别 -->
        <property name="OUTPUT_LOG_LEVEL">DEBUG</property>
    </Properties>
    <!--先定义所有的appender-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--这个都知道是输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        <!-- 程序员调试日志 -->
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!-- 按月生成归档日志，可以使用 filePattern="logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz" -->
        <!-- 显示error级别之外的信息 -->
        <RollingFile name="RollingFile"
                     fileName="${LOG_HOME}/dev_${SERVER_NAME}.log"
                     filePattern="${LOG_HOME}/dev_${BACKUP_HOME}/$${date:yyyy-MM}/dev_${SERVER_NAME}-%d{yyyy-MM-dd-HH}-%i.log.gz">
            <PatternLayout>
                <Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %level [%C{36}.%M] - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
            </Policies>
            <!--
            重要的是，如果有多个ThresholdFilter，那么Filters是必须的，同时在Filters中，首先要过滤不符合的日志级别，把不需要的首先DENY掉，然后再ACCEPT需要的日志级别，这个次序不能搞颠倒。
            -->
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
        <!-- 程序员调试日志 -->
        <!-- 只显示error级别的信息 -->
        <RollingFile name="RollingFileError"
                     fileName="${LOG_HOME}/dev_${SERVER_NAME}_error.log"
                     filePattern="${LOG_HOME}/dev_${BACKUP_HOME}/$${date:yyyy-MM}/dev_${SERVER_NAME}_error-%d{yyyy-MM-dd-HH}-%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy.MM.dd HH:mm:ss.SSS} [%thread] %level [%C{36}.%M:%L] - %msg%xEx%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
        <!-- 产品数据分析日志 -->
        <RollingRandomAccessFile name="ProductLog"
                                 fileName="${LOG_HOME}/${SERVER_NAME}.log"
                                 filePattern="${LOG_HOME}/${BACKUP_HOME}/$${date:yyyy-MM}/${SERVER_NAME}-%d{yyyy-MM-dd-HH}-%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy.MM.dd HH:mm:ss.SSS} [%thread] %level [%C{36}.%M:%L] - %msg%xEx%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"  modulate="true" />
                <SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}" />
            </Policies>
        </RollingRandomAccessFile>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <logger name="org.springframework" level="info"/>
        <AsyncLogger name="com.geekgo" level="${OUTPUT_LOG_LEVEL}" additivity="false" includeLocation="true">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="ProductLog"/>
        </AsyncLogger>
        <!--建立一个默认的root的logger，需要在root的level中指定输出的级别，-->
        <asyncRoot level="debug">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
            <AppenderRef ref="RollingFileError"/>
        </asyncRoot>
    </Loggers>
</Configuration>